package zutil

import (
    "log4go"
    "strings"
//    "strconv"
    "zconfig"
    "fmt"
)

// Logging stuff
//type Logger log4go.Logger
var log log4go.Logger = nil

var logLevelMap =  map[string]log4go.Level{
    "FINEST"  : log4go.FINEST,
    "FINE"    : log4go.FINE,
    "DEBUG"   : log4go.DEBUG,
    "TRACE"   : log4go.TRACE,
    "INFO"    : log4go.INFO,
    "WARNING" : log4go.WARNING,
    "ERROR"   : log4go.ERROR,
    "CRITICAL": log4go.CRITICAL,
}

func SetupLogger(filename string, level string) (*log4go.Logger) {
    // Get a new logger instance
    if log == nil {
        log = make(log4go.Logger)
        setupFileLogger(&log, filename, logLevelMap[level])
        setupConsoleLogger(&log, logLevelMap[level])
        //setupFileLogger(&log, filename, log4go.INFO)
        //setupConsoleLogger(&log, log4go.INFO)
        fmt.Println("init log.....")
        log.Info("======== Initializing application ========", level)
        log.Info("log file at:%s, logging level: %s", filename, level)
    }
    return &log

}

func setupFileLogger(log *log4go.Logger, filename string, level log4go.Level) {

    flw := log4go.NewFileLogWriter(filename, false)
    flw.SetFormat("[%D %T] [%L] (%S) %M")
    flw.SetRotate(false)
    flw.SetRotateSize(0)
    flw.SetRotateLines(0)
    flw.SetRotateDaily(false)
    // Logging to file
    log.AddFilter("file", level, flw)
}

func setupConsoleLogger(log *log4go.Logger, level log4go.Level) {

    flw1 := log4go.NewConsoleLogWriter()
    flw1.SetFormat("[%D %T] [%L] (%S) %M")
    // Logging to console
    log.AddFilter("stdout", level, flw1)
}

func GetLogger() (*log4go.Logger) {
    return &log 
}


// Configuration stuff
type Config struct {
    BindAddress     string
    ListenPort      string
    AddressAndPort  string

    LogPath          string
    Log             string
}

//var conf Config
var conf *Config

func processArgs(args []string) (confPath string) {
    
    binFullPath := strings.Split(args[0], "/")
    lenBinFullPath := len(binFullPath)
    prevDirPos := lenBinFullPath - 2
    
    if binFullPath[prevDirPos] == "." {
        // Same path
        confPath = "../etc"
    } else if binFullPath[prevDirPos] == "bin" {
        confPath = strings.Join(append(binFullPath[:prevDirPos], "etc"), "/")
    } else {
        confPath = "/opt/zagent/etc"
    }
    log.Debug("Config file Found at %s", confPath)
    return
}

func LoadConfig(args []string) (*Config){
    confFile := processArgs(args) + "/" + "zagent.conf"
    file, _ := zconfig.LoadFile(confFile)
    log.Info("Loading configuration file from %s", confFile)

    c := new(Config) 
    c.BindAddress, _ = file.Get("main", "listen_address")
    c.ListenPort, _ = file.Get("main", "port")
    c.AddressAndPort = c.BindAddress + ":" + c.ListenPort

    c.LogPath, _ = file.Get("log", "log_path")
    c.Log, _ = file.Get("log", "level")

    conf = c
    return conf
}

func GetConf() (*Config){
    //FIXME: this could return NULL fix!!!
    if conf != nil {
        log.Debug("Getting conf %s", *conf)
        return conf
    } else {
        log.Critical("Error configuration has not been loaded yet, run zutil.LoadConfig()")
        panic("Error configuration has not been loaded yet, run zutil.LoadConfig()")
    }
}
